<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo博客搭建</title>
      <link href="2021/04/07/hexo-bo-ke-da-jian/"/>
      <url>2021/04/07/hexo-bo-ke-da-jian/</url>
      
        <content type="html"><![CDATA[<p>#github创建个人仓库  #<br>登录成功之后，点击 GitHub 中的 New repository 创建新仓库，仓库名应该为：用户名 .<a href="http://github.io/">http://github.io</a> 。这里用户名使用你的 GitHub 帐号名称代替，这是固定写法。<br>我的仓库名为：<br><img src="/2021/04/07/hexo-bo-ke-da-jian/1.png"></p><h1 id="git-管理"><a href="#git-管理" class="headerlink" title="git 管理"></a>git 管理</h1><p>Git 是目前世界上最先进的分布式版本控制系统（没有之一）。这是使用 Git 的目的是为了将我们的网站从本地提交上服务器（GitHub）上面去。我认为 Git 操作是程序员应该具备的一个基本操作，具体的 Git 操作细节可以查看廖雪峰的教程，讲的十分详细<br><a href="https://www.liaoxuefeng.com/wiki/896043488029600" title="git教程">https://www.liaoxuefeng.com/wiki/896043488029600</a><br>安装好 Git 后，只需要进行下面的配置即可。</p><h1 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h1><p>在终端进行操作，设置 user.name 和 user.email 配置信息，我这里设置为全局。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"你的GitHub用户名"</span><span class="token function">git</span> config --global user.email <span class="token string">"你的GitHub注册邮箱"</span></code></pre><h1 id="生成秘钥"><a href="#生成秘钥" class="headerlink" title="生成秘钥"></a>生成秘钥</h1><p>通过注册的邮箱生成 ssh 密钥文件：<br> <code>ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</code><br>然后直接三个回车即可，默认不需要设置密码。最后得到了两个文件：id_rsa和id_rsa.pub。</p><h2 id="拷贝密钥"><a href="#拷贝密钥" class="headerlink" title="拷贝密钥"></a>拷贝密钥</h2><p><img src="/2021/04/07/hexo-bo-ke-da-jian/2.jpg"><br>打开 id_rsa.pub 文件，将里面的内容全部复制。<br><img src="/2021/04/07/hexo-bo-ke-da-jian/3.jpg"><br><strong>粘贴到GitHub</strong><br><img src="/2021/04/07/hexo-bo-ke-da-jian/4.jpg"><br><img src="/2021/04/07/hexo-bo-ke-da-jian/5.jpg"><br><strong>测试GitHub SSH</strong><br>添加好 SSH Key后，进行测试。<br>    <code>ssh -T git@github.com</code><br>你将会看到：</p><pre class=" language-bash"><code class="language-bash">   The authenticity of host <span class="token string">'github.com (207.97.227.239)'</span> can't be established.2RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.3Are you sure you want to <span class="token keyword">continue</span> connecting <span class="token punctuation">(</span>yes/no<span class="token punctuation">)</span>?</code></pre><p>选择 yes.<br><img src="/2021/04/07/hexo-bo-ke-da-jian/6.jpg"><br>如果看到Hi后面是你的用户名，就说明成功了。</p><h1 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h1><p>Hexo 基于 Node.js，因此需要先安装 Node.js，你可以在这里进行对应电脑版本的下载：<a href="https://nodejs.org/en/download/" title="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a><br><img src="/2021/04/07/hexo-bo-ke-da-jian/7.jpg"><br>你也可以通过命令行进行安装：<br>cURL:<br>    <code>curl https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh</code><br>Wget:<br>    <code>wget -qO- https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh</code><br>安装完成后，重启终端并执行下列命令即可安装 Node.js。<br>    <code>nvm install stable</code></p><h2 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。<br>    <code>npm install -g hexo-cli</code></p><h1 id="Hexo使用"><a href="#Hexo使用" class="headerlink" title="Hexo使用"></a>Hexo使用</h1><p>安装好 Hexo 后，马上就能使用了。首先初始化博客，输入：<br>    <code>hexo init myBlog</code><br><img src="/2021/04/07/hexo-bo-ke-da-jian/8.jpg"><br>接下来，进入文件夹 myBlog,输入<br>    <code>hexo s</code><br>然后，打开浏览器输入地址：<br>    <code>localhost:4000</code></p><p>执行到这里事实上博客就已经搭建好了，接下来就是去完善它。</p><p>注意：下面的命令都是在 myBlog文件里进行操作的。<br><img src="/2021/04/07/hexo-bo-ke-da-jian/9.jpg"></p><h3 id="直接导入文章"><a href="#直接导入文章" class="headerlink" title="直接导入文章"></a>直接导入文章</h3><p>你可以将你平时写的文章直接导入到 _posts 文件夹里，注意文章类型得是 md格式。</p><h3 id="写新文章"><a href="#写新文章" class="headerlink" title="写新文章"></a>写新文章</h3><p>你可以执行下列命令来创建一篇新文章。<br>    <code>hexo new [layout] &lt;title&gt;</code><br>你可以在命令中指定文章的布局（layout），默认为 post，可以通过修改 _config.yml 中的 default_layout 参数来指定默认布局。<br>这样在 _posts 文件夹里也生成了一篇新的文章。<br><img src="/2021/04/07/hexo-bo-ke-da-jian/10.jpg"></p><p>这三个命令依次就是新建一篇博客文章、生成网页、在本地预览的操作。</p><pre class=" language-bash"><code class="language-bash">hexo new <span class="token string">"我的博客文章"</span> <span class="token comment" spellcheck="true">#新建文章</span>hexo generate <span class="token comment" spellcheck="true">#生成网页</span>hexo server <span class="token comment" spellcheck="true">#启动服务预览</span></code></pre><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>Hexo 提供了快速方便的一键部署功能，只需一条命令就能将网站部署到服务器上。<br>    <code> hexo deploy</code><br>在开始之前，必须先在 _config.yml 中修改参数，一个正确的部署配置中至少要有 type 参数，例如：</p><pre class=" language-bash"><code class="language-bash">deploy:type: <span class="token function">git</span></code></pre><p>在_config.yml中进行修改。<br>  <img src="/2021/04/07/hexo-bo-ke-da-jian/11.png"><br>这一步的目的是将 Hexo 与 GitHub 进行关联。</p><p>配置好后通过<br>    <code>hexo d </code></p><p>命令，稍等片刻，网站就已经部署好了，可以在浏览器输入你的GitHub名称.github.io，这样一个免费的博客就已经搭建好了。</p><h1 id="markdown-写作"><a href="#markdown-写作" class="headerlink" title="markdown 写作"></a>markdown 写作</h1><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。世面上支持 Markdown 语法的编辑器不胜枚举，选择起来十分困难，小吴在这里推荐 Typora 这款 Markdown 写作软件。Typora 是一款免费的 MD 编辑器，它是优雅简洁与强大开放的完美结合体。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>申请 GitHub 账号</li><li>在 GitHub 上创建仓库</li><li>配备 Git ，同时将 SSH Key 提交到GitHub 上</li><li>安装 Node.js</li><li>安装 Hexo</li><li>安装 Hexo 主题</li><li>使用 Markdown 软件写文章</li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown基本使用</title>
      <link href="2021/04/06/123/"/>
      <url>2021/04/06/123/</url>
      
        <content type="html"><![CDATA[<p>#开始  #</p><h2 id="markdown"><a href="#markdown" class="headerlink" title="markdown"></a>markdown</h2><p><strong>ctrl+B：加粗</strong><br><em>ctrl+I：斜体</em></p><blockquote><p>ctrl+Q：引用<br><code>ctrl+K：代码</code></p></blockquote><pre class=" language-bash"><code class="language-bash">weqwewererewrewerewrwefrwe</code></pre><p>ctrl+L：链接<br><a href="http://www.baidu.com/" title="百度">http://www.baidu.com</a></p><p>ctrl+U：无序列表<br>ctrl+shift+O：有序列表</p><h2 id="ctrl-R：-水平线"><a href="#ctrl-R：-水平线" class="headerlink" title="ctrl+R： 水平线"></a>ctrl+R： 水平线</h2><p>图片：<img src="/2021/04/06/123/Image.png" alt="123"></p><h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><ul><li>hexo new filename：在_post文件里新建md文件及其存储pictures的文件夹。</li><li>hexo g：生成页面</li><li>hexo s：开启本地服务器：localhost：4000</li><li>hexo d：部署到github<h3 id="格式问题"><a href="#格式问题" class="headerlink" title="格式问题"></a>格式问题</h3></li><li>图片：复制到_post中对应文件里；<img src="/2021/04/06/123/jpeg" alt="123"></li><li>文章开头：tags：空格+内容|多个tag格式-[1,2,3]</li><li>加密：password：空格+密码</li></ul><p>#结束  #</p>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo与github图片不显示</title>
      <link href="2021/01/17/hexo-he-github-tu-pian/"/>
      <url>2021/01/17/hexo-he-github-tu-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="github图片不显示问题："><a href="#github图片不显示问题：" class="headerlink" title="github图片不显示问题："></a>github图片不显示问题：</h1><p>C:\Windows\System32\drivers\etc\hosts:</p><p>修改权限</p><p>末行加入：<br>140.82.114.4    github.com </p><p>140.82.113.3    gist.github.com</p><p>199.232.28.133    assets-cdn.github.com</p><p>199.232.28.133    raw.githubusercontent.com</p><p>199.232.28.133    gist.githubusercontent.com</p><p>199.232.28.133    cloud.githubusercontent.com</p><p>199.232.28.133    camo.githubusercontent.com</p><p>199.232.28.133    avatars0.githubusercontent.com</p><p>199.232.28.133    avatars1.githubusercontent.com</p><p>199.232.28.133    avatars2.githubusercontent.com</p><p>199.232.28.133    avatars3.githubusercontent.com</p><p>199.232.28.133    avatars4.githubusercontent.com</p><p>199.232.28.133    avatars5.githubusercontent.com</p><p>199.232.28.133    avatars6.githubusercontent.com</p><p>199.232.28.133    avatars7.githubusercontent.com</p><p>199.232.28.133    avatars8.githubusercontent.com</p><hr><p>#hexo 添加图片问题#</p><pre class=" language-bash"><code class="language-bash">$ hexo generatefdjhgfdjkfdjhfdhfdhd</code></pre><ul><li>插件安装与配置</li></ul><p>首先我们需要安装一个图片路径转换的插件，这个插件名字是hexo-asset-image</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">npm</span> <span class="token function">install</span> https://github.com/CodeFalling/hexo-asset-image --save</code></pre><ul><li><p>打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码</p><pre class=" language-bash"><code class="language-bash">  <span class="token string">'use strict'</span><span class="token punctuation">;</span>  var cheerio <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">'cheerio'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string  <span class="token keyword">function</span> getPosition<span class="token punctuation">(</span>str, m, i<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">return</span> str.split<span class="token punctuation">(</span>m, i<span class="token punctuation">)</span>.join<span class="token punctuation">(</span>m<span class="token punctuation">)</span>.length<span class="token punctuation">;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>  var version <span class="token operator">=</span> String<span class="token punctuation">(</span>hexo.version<span class="token punctuation">)</span>.split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  hexo.extend.filter.register<span class="token punctuation">(</span><span class="token string">'after_post_render'</span>, function<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    var config <span class="token operator">=</span> hexo.config<span class="token punctuation">;</span>    if<span class="token punctuation">(</span>config.post_asset_folder<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      var <span class="token function">link</span> <span class="token operator">=</span> data.permalink<span class="token punctuation">;</span>      if<span class="token punctuation">(</span>version.length <span class="token operator">></span> 0 <span class="token operator">&amp;&amp;</span> Number<span class="token punctuation">(</span>version<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> 3<span class="token punctuation">)</span>         var beginPos <span class="token operator">=</span> getPosition<span class="token punctuation">(</span>link, <span class="token string">'/'</span>, 1<span class="token punctuation">)</span> + 1<span class="token punctuation">;</span>      <span class="token keyword">else</span>         var beginPos <span class="token operator">=</span> getPosition<span class="token punctuation">(</span>link, <span class="token string">'/'</span>, 3<span class="token punctuation">)</span> + 1<span class="token punctuation">;</span>      // In hexo 3.1.1, the permalink of <span class="token string">"about"</span> page is like <span class="token string">".../about/index.html"</span><span class="token keyword">.</span>      var endPos <span class="token operator">=</span> link.lastIndexOf<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span> + 1<span class="token punctuation">;</span>  <span class="token function">link</span> <span class="token operator">=</span> link.substring<span class="token punctuation">(</span>beginPos, endPos<span class="token punctuation">)</span><span class="token punctuation">;</span>  var toprocess <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'excerpt'</span>, <span class="token string">'more'</span>, <span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  for<span class="token punctuation">(</span>var i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> toprocess.length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    var key <span class="token operator">=</span> toprocess<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> var $ <span class="token operator">=</span> cheerio.load<span class="token punctuation">(</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span>, <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span> ignoreWhitespace: false,  xmlMode: false,  lowerCaseTags: false,  decodeEntities: <span class="token boolean">false</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>    <span class="token punctuation">$(</span><span class="token string">'img'</span><span class="token punctuation">)</span>.each<span class="token punctuation">(</span>function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable"><span class="token variable">$(</span>this<span class="token variable">)</span></span>.attr<span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">))</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        // For windows style path, we replace <span class="token string">'\' to '</span>/<span class="token string">'.        var src = <span class="token variable"><span class="token variable">$(</span>this<span class="token variable">)</span></span>.attr('</span>src<span class="token string">').replace('</span>\\<span class="token string">', '</span>/<span class="token string">');        if(!/http[s]*.*|\/\/.*/.test(src) &amp;&amp;           !/^\s*\//.test(src)) &amp;#123;          // For "about" page, the first part of "src" can'</span>t be removed.          // In addition, to support multi-level local directory.          var linkArray <span class="token operator">=</span> link.split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>.filter<span class="token punctuation">(</span>function<span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token keyword">return</span> elem <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>          var srcArray <span class="token operator">=</span> src.split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>.filter<span class="token punctuation">(</span>function<span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token keyword">return</span> elem <span class="token operator">!=</span> <span class="token string">''</span> <span class="token operator">&amp;&amp;</span> elem <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>          if<span class="token punctuation">(</span>srcArray.length <span class="token operator">></span> 1<span class="token punctuation">)</span>            srcArray.shift<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          src <span class="token operator">=</span> srcArray.join<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token variable"><span class="token variable">$(</span>this<span class="token variable">)</span></span>.attr<span class="token punctuation">(</span><span class="token string">'src'</span>, config.root + <span class="token function">link</span> + src<span class="token punctuation">)</span><span class="token punctuation">;</span>          console.info<span class="token operator">&amp;&amp;</span>console.info<span class="token punctuation">(</span><span class="token string">"update link as:-->"</span>+config.root + <span class="token function">link</span> + src<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;else&amp;#123;</span>        console.info<span class="token operator">&amp;&amp;</span>console.info<span class="token punctuation">(</span><span class="token string">"no src attr, skipped..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console.info<span class="token operator">&amp;&amp;</span>console.info<span class="token punctuation">(</span><span class="token variable"><span class="token variable">$(</span>this<span class="token variable">)</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> $.html<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span></code></pre></li></ul><ul><li><p>打开_config.yml文件，修改下述内容</p><p><code>  post_asset_folder: true</code></p></li><li><p>创建文章及其同名文件夹<br>hexo new file<br>在_post文件夹里创建了file.md和file文件夹，将需要的图片复制到file里。<br>！<a href="picture.png">随便写</a> 导入图片。</p></li><li><p>问题<br><img src="/2021/01/17/hexo-he-github-tu-pian/1.png" alt="问题"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo主题</title>
      <link href="2021/01/17/hexo-zhu-ti/"/>
      <url>2021/01/17/hexo-zhu-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><ul><li>当你看到这里的时候，应该已经有一个自己的 Hexo 博客了。如果还没有的话，不妨使用 Hexo 和 Markdown 来写博客和文章。</li></ul><ul><li><p>点击 <a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/" title="这里">这里</a> 下载 master 分支的最新稳定版的代码，解压缩后，将 hexo-theme-matery 的文件夹复制到你 Hexo 的 themes 文件夹中即可。<br>当然你也可以在你的 themes 文件夹下使用 Git clone 命令来下载:</p><p>  bash<br>  git clone <a href="https://github.com/blinkfox/hexo-theme-matery.git">https://github.com/blinkfox/hexo-theme-matery.git</a></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h2></li><li><p>修改 Hexo 根目录下的 _config.yml 的 theme 的值：theme: hexo-theme-matery_config.yml 文件的其它修改建议:</p></li><li><p>请修改 _config.yml 的 url 的值为你的网站主 URL（如：<a href="http://xxx.github.io)./">http://xxx.github.io）。</a></p></li><li><p>建议修改两个 per_page 的分页条数值为 6 的倍数，如：12、18 等，这样文章列表在各个屏幕下都能较好的显示。</p></li><li><p>如果你是中文用户，则建议修改 language 的值为 zh-CN。</p></li></ul><h2 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h2><p>categories 页是用来展示所有分类的页面，如果在你的博客 source 目录下还没有 categories/index.md 文件，那么你就需要新建一个，命令如下：</p><pre><code>bashhexo new page &quot;categories&quot;</code></pre><p>编辑你刚刚新建的页面文件 /source/categories/index.md，至少需要以下内容：</p><pre><code>---title: categoriesdate: 2018-09-30 17:25:30type: &quot;categories&quot;layout: &quot;categories&quot;---</code></pre><h2 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h2><p>tags 页是用来展示所有标签的页面，如果在你的博客 source 目录下还没有 tags/index.md 文件，那么你就需要新建一个，命令如下：</p><pre><code>bashhexo new page &quot;tags&quot;</code></pre><p>编辑你刚刚新建的页面文件 /source/tags/index.md，至少需要以下内容：</p><p>yaml<br>    —<br>    title: tags<br>    date: 2018-09-30 18:23:38<br>    type: “tags”<br>    layout: “tags”<br>    —</p><h2 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h2><p>about 页是用来展示关于我和我的博客信息的页面，如果在你的博客 source 目录下还没有 about/index.md 文件，那么你就需要新建一个，命令如下：</p><pre><code>bashhexo new page &quot;about&quot;</code></pre><p>编辑你刚刚新建的页面文件 /source/about/index.md，至少需要以下内容：</p><p>yaml<br>    —<br>    title: about<br>    date: 2018-09-30 17:25:30<br>    type: “about”<br>    layout: “about”<br>    —</p><h2 id="新建友情连接-friends-页（可选的）"><a href="#新建友情连接-friends-页（可选的）" class="headerlink" title="新建友情连接 friends 页（可选的）"></a>新建友情连接 friends 页（可选的）</h2><p>friends 页是用来展示友情连接信息的页面，如果在你的博客 source 目录下还没有 friends/index.md 文件，那么你就需要新建一个，命令如下：</p><pre><code>bashhexo new page &quot;friends&quot;</code></pre><p>编辑你刚刚新建的页面文件 /source/friends/index.md，至少需要以下内容：</p><p>yaml<br>    —<br>    title: friends<br>    date: 2018-12-12 21:25:30<br>    type: “friends”<br>    layout: “friends”<br>    —<br>同时，在你的博客 source 目录下新建 _data 目录，在 _data 目录中新建 friends.json 文件，文件内容如下所示：</p><p>json：</p><pre><code>[&#123;&quot;avatar&quot;: &quot;http://image.luokangyuan.com/1_qq_27922023.jpg&quot;,&quot;name&quot;: &quot;码酱&quot;,&quot;introduction&quot;: &quot;我不是大佬，只是在追寻大佬的脚步&quot;,&quot;url&quot;: &quot;http://luokangyuan.com/&quot;,&quot;title&quot;: &quot;前去学习&quot;&#125;, &#123;&quot;avatar&quot;: &quot;http://image.luokangyuan.com/4027734.jpeg&quot;,&quot;name&quot;: &quot;闪烁之狐&quot;,&quot;introduction&quot;: &quot;编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬&quot;,&quot;url&quot;: &quot;https://blinkfox.github.io/&quot;,&quot;title&quot;: &quot;前去学习&quot;&#125;, &#123;&quot;avatar&quot;: &quot;http://image.luokangyuan.com/avatar.jpg&quot;,&quot;name&quot;: &quot;ja_rome&quot;,&quot;introduction&quot;: &quot;平凡的脚步也可以走出伟大的行程&quot;,&quot;url&quot;: &quot;ttps://me.csdn.net/jlh912008548&quot;,&quot;title&quot;: &quot;前去学习&quot;&#125;]</code></pre><p>若链接图片不显示参照我的博客篇<a href="https://qidianzhj.github.io/2021/01/17/github-tu-pian/">github图片不显示</a>，并更改图片链接。</p><h2 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h2><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 hexo-prism-plugin 的 Hexo 插件来做代码高亮，安装命令如下：</p><pre><code>bashnpm i -S hexo-prism-plugin</code></pre><p>然后，修改 Hexo 根目录下 _config.yml 文件中 highlight.enable 的值为 false，并新增 prism 插件相关的配置，主要配置如下：</p><p>yaml<br>highlight:<br>  enable: false</p><p>prism_plugin:<br>  mode: ‘preprocess’# realtime/preprocess<br>  theme: ‘tomorrow’<br>  line_number: false# default false<br>  custom_css:</p><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p>本主题中还使用到了 hexo-generator-search 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre><code>bashnpm install hexo-generator-search --save</code></pre><p>在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><p>yaml<br>    search:<br>      path: search.xml<br>      field: post</p><h2 id="中文链接转拼音（可选的）"><a href="#中文链接转拼音（可选的）" class="headerlink" title="中文链接转拼音（可选的）"></a>中文链接转拼音（可选的）</h2><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 SEO，且 gitment 评论对中文链接也不支持。我们可以用 hexo-permalink-pinyin Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre><code>bashnpm i hexo-permalink-pinyin --save</code></pre><p>在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><p>yaml<br>    permalink_pinyin:<br>      enable: true<br>      separator: ‘-‘ # default: ‘-‘<br>注：除了此插件外，hexo-abbrlink 插件也可以生成非中文的链接。</p><h2 id="文章字数统计插件（可选的）"><a href="#文章字数统计插件（可选的）" class="headerlink" title="文章字数统计插件（可选的）"></a>文章字数统计插件（可选的）</h2><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 hexo-wordcount插件。</p><p>安装命令如下：</p><pre><code>bashnpm i --save hexo-wordcount</code></pre><p>然后只需在本主题下的 _config.yml 文件中，激活以下配置项即可：</p><p>yaml<br>    wordCount:<br>      enable: false # 将这个值设置为 true 即可.<br>      postWordCount: true<br>      min2read: true<br>      totalCount: true</p><h2 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h2><p>本主题中还使用到了 hexo-generator-feed 的 Hexo 插件来做 RSS，安装命令如下：</p><pre><code>bashnpm install hexo-generator-feed --save</code></pre><p>在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><p>yaml<br>    feed:<br>      type: atom<br>      path: atom.xml<br>      limit: 20<br>      hub:<br>      content:<br>      content_limit: 140<br>      content_limit_delim: ‘ ‘<br>      order_by: -date<br>执行 hexo clean &amp;&amp; hexo g 重新生成博客文件，然后在 public 文件夹中即可看到 atom.xml 文件，说明你已经安装成功了。</p><h2 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h2><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 /layout/_partial/footer.ejs 文件中，包括站点、使用的主题、访问量等。</p><h2 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h2><p>在主题的 _config.yml 文件中，默认支持 QQ、GitHub 和邮箱的配置，你可以在主题文件的 /layout/_partial/social-link.ejs 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><p>html</p><a href="https://github.com/blinkfox" class="tooltipped" target="_blank" data-tooltip="访问我的GitHub" data-position="top" data-delay="50"><i class="fa fa-github"></i></a><p>其中，社交图标（如：fa-github）你可以在 Font Awesome 中搜索找到。以下是常用社交图标的标识，供你参考：</p><pre><code>Facebook: fa-facebookTwitter: fa-twitterGoogle-plus: fa-google-plusLinkedin: fa-linkedinTumblr: fa-tumblrMedium: fa-mediumSlack: fa-slack新浪微博: fa-weibo微信: fa-wechatQQ: fa-qq</code></pre><p>注意: 本主题中使用的 Font Awesome 版本为 4.7.0。</p><h2 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h2><p>要支持音乐播放，就必须开启音乐的播放配置和音乐数据的文件。</p><p>首先，在你的博客 source 目录下的 _data 目录（没有的话就新建一个）中新建 musics.json 文件，文件内容如下所示：</p><p>json</p><pre><code>[&#123;    &quot;name&quot;: &quot;五月雨变奏电音&quot;,    &quot;artist&quot;: &quot;AnimeVibe&quot;,    &quot;url&quot;: &quot;http://xxx.com/music1.mp3&quot;,    &quot;cover&quot;: &quot;http://xxx.com/music-cover1.png&quot;&#125;, &#123;    &quot;name&quot;: &quot;Take me hand&quot;,    &quot;artist&quot;: &quot;DAISHI DANCE,Cecile Corbel&quot;,    &quot;url&quot;: &quot;/medias/music/music2.mp3&quot;,    &quot;cover&quot;: &quot;/medias/music/cover2.png&quot;&#125;, &#123;    &quot;name&quot;: &quot;Shape of You&quot;,    &quot;artist&quot;: &quot;J.Fla&quot;,    &quot;url&quot;: &quot;http://xxx.com/music3.mp3&quot;,    &quot;cover&quot;: &quot;http://xxx.com/music-cover3.png&quot;&#125;]</code></pre><p>注：以上 JSON 中的属性：name、artist、url、cover 分别表示音乐的名称、作者、音乐文件地址、音乐封面。</p><p>然后，在主题的 _config.yml 配置文件中激活配置即可：</p><p>yaml</p><h1 id="是否在首页显示音乐"><a href="#是否在首页显示音乐" class="headerlink" title="是否在首页显示音乐."></a>是否在首页显示音乐.</h1><pre><code>music:  enable: true  showTitle: false  title: 听听音乐  fixed: false # 是否开启吸底模式  autoplay: false # 是否自动播放  theme: &#39;#42b983&#39;  loop: &#39;all&#39; # 音频循环播放, 可选值: &#39;all&#39;, &#39;one&#39;, &#39;none&#39;  order: &#39;list&#39; # 音频循环顺序, 可选值: &#39;list&#39;, &#39;random&#39;  preload: &#39;auto&#39; # 预加载，可选值: &#39;none&#39;, &#39;metadata&#39;, &#39;auto&#39;  volume: 0.7 # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效  listFolded: false # 列表默认折叠  listMaxHeight: # 列表最大高度</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/01/11/hello-world/"/>
      <url>2021/01/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PCB原理图</title>
      <link href="2021/01/01/pcb/"/>
      <url>2021/01/01/pcb/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="842ff83506f3fecd62835468f48e832e29cdf2eaa96e14d5a86d554fa0cd47a1"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> PCB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PCB原理图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux——虚拟机安装</title>
      <link href="2021/01/01/linux-xu-ni-ji/"/>
      <url>2021/01/01/linux-xu-ni-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu-16-04-安装："><a href="#Ubuntu-16-04-安装：" class="headerlink" title="Ubuntu 16.04 安装："></a>Ubuntu 16.04 安装：</h1><p><a href="http://www.baidu.com/" title="百度">http://www.baidu.com</a></p><p><em><a href="https://blog.csdn.net/kellyroslyn/article/details/91607520">https://blog.csdn.net/kellyroslyn/article/details/91607520</a></em><br>界面显示不全， 左手按住alt键右手鼠标往上拖动安装界面，即可显示完全内容</p><h1 id="vmware-Tools-安装："><a href="#vmware-Tools-安装：" class="headerlink" title="vmware Tools 安装："></a>vmware Tools 安装：</h1><p><a href="https://blog.csdn.net/weixin_37182342/article/details/80236632?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task">https://blog.csdn.net/weixin_37182342/article/details/80236632?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task</a> </p><h2 id="桥接模式设置，解决连不上网的问题"><a href="#桥接模式设置，解决连不上网的问题" class="headerlink" title="桥接模式设置，解决连不上网的问题"></a>桥接模式设置，解决连不上网的问题</h2><ol><li><a href="https://blog.csdn.net/Mr_jianfeng/article/details/81053849/">https://blog.csdn.net/Mr_jianfeng/article/details/81053849/</a><h2 id="安装谷歌中文输入法："><a href="#安装谷歌中文输入法：" class="headerlink" title="安装谷歌中文输入法："></a>安装谷歌中文输入法：</h2></li><li><a href="https://blog.csdn.net/lybhit/article/details/78663731">https://blog.csdn.net/lybhit/article/details/78663731</a></li><li>mqtt</li><li><a href="https://blog.csdn.net/jsjwr/article/details/78800202">https://blog.csdn.net/jsjwr/article/details/78800202</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绝对路径相关及JVM、JRE、JDK</title>
      <link href="2021/01/01/jue-dui-lu-jing/"/>
      <url>2021/01/01/jue-dui-lu-jing/</url>
      
        <content type="html"><![CDATA[<h2 id="使用绝对路径的方式引入CSS文件"><a href="#使用绝对路径的方式引入CSS文件" class="headerlink" title="使用绝对路径的方式引入CSS文件"></a>使用绝对路径的方式引入CSS文件</h2><p>$ <link rel="stylesheet" href="${pageContext.request.contextPath}/themes/default/css/ueditor.css" type="text/css"></p><h2 id="使用绝对路径的方式引入JavaScript脚本"><a href="#使用绝对路径的方式引入JavaScript脚本" class="headerlink" title="使用绝对路径的方式引入JavaScript脚本"></a>使用绝对路径的方式引入JavaScript脚本</h2><p>$ <script type="text/javascript" src="{pageContext.request.contextPath}/ueditor1_3_6-gbk-jsp/ueditor.config.js"></script></p><p>#<script type="text/javascript" src="<%=request.getContextPath()%>/ueditor1_3_6-gbk-jsp/ueditor.all.js"></script><br>${pageContext.request.contextPath}与&lt;%getContextPath%&gt;效果相同。<br>取出部署的应用程序名，这样不管如何部署，所用路径都是正确的。</p><h2 id="JRE-–-java-runtime-environment"><a href="#JRE-–-java-runtime-environment" class="headerlink" title="JRE – java runtime environment"></a>JRE – java runtime environment</h2><p>   JRE是指java运行环境。光有JVM还不能成class的执行，因为在解释class的时候JVM需要调用解释所需要的类库lib。在JDK的安装目录里你可以找到jre目录，里面有两个文件夹bin和lib,在这里可以认为bin里的就是jvm，lib中则是jvm工作所需要的类库，而jvm和 lib和起来就称为jre。所以，在你写完java程序编译成.class之后，你可以把这个.class文件和jre一起打包发给朋友，这样你的朋友就可以运行你写程序了。（jre里有运行.class的java.exe）</p><h2 id="JDK-–-java-development-kit"><a href="#JDK-–-java-development-kit" class="headerlink" title="JDK – java development kit"></a>JDK – java development kit</h2>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
